// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetUserInfoParams creates a new GetUserInfoParams object
// no default values defined in spec.
func NewGetUserInfoParams() GetUserInfoParams {

	return GetUserInfoParams{}
}

// GetUserInfoParams contains all the bound params for the get user info operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetUserInfo
type GetUserInfoParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: header
	*/
	XUserEmail string
	/*
	  Required: true
	  In: header
	*/
	XUserFirstName string
	/*
	  Required: true
	  In: header
	*/
	XUserLastName string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetUserInfoParams() beforehand.
func (o *GetUserInfoParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := o.bindXUserEmail(r.Header[http.CanonicalHeaderKey("X-User-Email")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindXUserFirstName(r.Header[http.CanonicalHeaderKey("X-User-First-Name")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindXUserLastName(r.Header[http.CanonicalHeaderKey("X-User-Last-Name")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindXUserEmail binds and validates parameter XUserEmail from header.
func (o *GetUserInfoParams) bindXUserEmail(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("X-User-Email", "header")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("X-User-Email", "header", raw); err != nil {
		return err
	}

	o.XUserEmail = raw

	return nil
}

// bindXUserFirstName binds and validates parameter XUserFirstName from header.
func (o *GetUserInfoParams) bindXUserFirstName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("X-User-First-Name", "header")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("X-User-First-Name", "header", raw); err != nil {
		return err
	}

	o.XUserFirstName = raw

	return nil
}

// bindXUserLastName binds and validates parameter XUserLastName from header.
func (o *GetUserInfoParams) bindXUserLastName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("X-User-Last-Name", "header")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("X-User-Last-Name", "header", raw); err != nil {
		return err
	}

	o.XUserLastName = raw

	return nil
}
