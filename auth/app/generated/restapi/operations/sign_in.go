// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SignInHandlerFunc turns a function with the right signature into a sign in handler
type SignInHandlerFunc func(SignInParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SignInHandlerFunc) Handle(params SignInParams) middleware.Responder {
	return fn(params)
}

// SignInHandler interface for that can handle valid sign in params
type SignInHandler interface {
	Handle(SignInParams) middleware.Responder
}

// NewSignIn creates a new http.Handler for the sign in operation
func NewSignIn(ctx *middleware.Context, handler SignInHandler) *SignIn {
	return &SignIn{Context: ctx, Handler: handler}
}

/*SignIn swagger:route GET /signin signIn

Login user

*/
type SignIn struct {
	Context *middleware.Context
	Handler SignInHandler
}

func (o *SignIn) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSignInParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SignInBody sign in body
//
// swagger:model SignInBody
type SignInBody struct {

	// email
	// Required: true
	// Min Length: 1
	Email *string `json:"Email"`

	// password hash
	// Required: true
	// Min Length: 6
	PasswordHash *string `json:"PasswordHash"`
}

// Validate validates this sign in body
func (o *SignInBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePasswordHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SignInBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"Email", "body", o.Email); err != nil {
		return err
	}

	if err := validate.MinLength("Body"+"."+"Email", "body", string(*o.Email), 1); err != nil {
		return err
	}

	return nil
}

func (o *SignInBody) validatePasswordHash(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"PasswordHash", "body", o.PasswordHash); err != nil {
		return err
	}

	if err := validate.MinLength("Body"+"."+"PasswordHash", "body", string(*o.PasswordHash), 6); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SignInBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SignInBody) UnmarshalBinary(b []byte) error {
	var res SignInBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
