// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"otus-products/app/generated/models"
)

// GetProductsOKCode is the HTTP code returned for type GetProductsOK
const GetProductsOKCode int = 200

/*GetProductsOK Get products success

swagger:response getProductsOK
*/
type GetProductsOK struct {
	/*

	 */
	ETag string `json:"ETag"`

	/*
	  In: Body
	*/
	Payload []*models.Products `json:"body,omitempty"`
}

// NewGetProductsOK creates GetProductsOK with default headers values
func NewGetProductsOK() *GetProductsOK {

	return &GetProductsOK{}
}

// WithETag adds the eTag to the get products o k response
func (o *GetProductsOK) WithETag(eTag string) *GetProductsOK {
	o.ETag = eTag
	return o
}

// SetETag sets the eTag to the get products o k response
func (o *GetProductsOK) SetETag(eTag string) {
	o.ETag = eTag
}

// WithPayload adds the payload to the get products o k response
func (o *GetProductsOK) WithPayload(payload []*models.Products) *GetProductsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get products o k response
func (o *GetProductsOK) SetPayload(payload []*models.Products) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProductsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header ETag

	eTag := o.ETag
	if eTag != "" {
		rw.Header().Set("ETag", eTag)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Products, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetProductsBadRequestCode is the HTTP code returned for type GetProductsBadRequest
const GetProductsBadRequestCode int = 400

/*GetProductsBadRequest Bad request

swagger:response getProductsBadRequest
*/
type GetProductsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.FailResponse `json:"body,omitempty"`
}

// NewGetProductsBadRequest creates GetProductsBadRequest with default headers values
func NewGetProductsBadRequest() *GetProductsBadRequest {

	return &GetProductsBadRequest{}
}

// WithPayload adds the payload to the get products bad request response
func (o *GetProductsBadRequest) WithPayload(payload *models.FailResponse) *GetProductsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get products bad request response
func (o *GetProductsBadRequest) SetPayload(payload *models.FailResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProductsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetProductsInternalServerErrorCode is the HTTP code returned for type GetProductsInternalServerError
const GetProductsInternalServerErrorCode int = 500

/*GetProductsInternalServerError Internal server error

swagger:response getProductsInternalServerError
*/
type GetProductsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.FailResponse `json:"body,omitempty"`
}

// NewGetProductsInternalServerError creates GetProductsInternalServerError with default headers values
func NewGetProductsInternalServerError() *GetProductsInternalServerError {

	return &GetProductsInternalServerError{}
}

// WithPayload adds the payload to the get products internal server error response
func (o *GetProductsInternalServerError) WithPayload(payload *models.FailResponse) *GetProductsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get products internal server error response
func (o *GetProductsInternalServerError) SetPayload(payload *models.FailResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProductsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
