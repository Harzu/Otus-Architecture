// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetProductsHandlerFunc turns a function with the right signature into a get products handler
type GetProductsHandlerFunc func(GetProductsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProductsHandlerFunc) Handle(params GetProductsParams) middleware.Responder {
	return fn(params)
}

// GetProductsHandler interface for that can handle valid get products params
type GetProductsHandler interface {
	Handle(GetProductsParams) middleware.Responder
}

// NewGetProducts creates a new http.Handler for the get products operation
func NewGetProducts(ctx *middleware.Context, handler GetProductsHandler) *GetProducts {
	return &GetProducts{Context: ctx, Handler: handler}
}

/*GetProducts swagger:route GET /products getProducts

Search products by params

*/
type GetProducts struct {
	Context *middleware.Context
	Handler GetProductsHandler
}

func (o *GetProducts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetProductsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetProductsBody get products body
//
// swagger:model GetProductsBody
type GetProductsBody struct {

	// limit
	// Required: true
	// Minimum: 1
	Limit *int64 `json:"limit"`

	// type
	// Required: true
	// Min Length: 1
	Type *string `json:"type"`
}

// Validate validates this get products body
func (o *GetProductsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProductsBody) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"limit", "body", o.Limit); err != nil {
		return err
	}

	if err := validate.MinimumInt("Body"+"."+"limit", "body", int64(*o.Limit), 1, false); err != nil {
		return err
	}

	return nil
}

func (o *GetProductsBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	if err := validate.MinLength("Body"+"."+"type", "body", string(*o.Type), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetProductsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProductsBody) UnmarshalBinary(b []byte) error {
	var res GetProductsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
